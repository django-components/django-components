---
name: Docs - build & deploy
on:
  push:
    tags:
      # for versions 0.### (before 1.0.0)
      - '0.[0-9]+'
      # after 1.0.0
      - '[0-9]+.[0-9]+.[0-9]+'
    branches: 
      - master
  workflow_dispatch:

jobs:
  docs:
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: write  # to let mkdocs write the new docs
      pages: write     # to deploy to Pages
      id-token: write  # to verify the deployment originates from an appropriate source
      pull-requests: write  # to merge to master via PR
    runs-on: ubuntu-latest
    # Only run in original repo (not in forks)
    if: github.repository == 'django-components/django-components'
    steps:

      ##############################
      # SETUP
      ##############################

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install Hatch
        run: |
            python -m pip install --upgrade pip wheel
            python -m pip install -q hatch pre-commit asv
            hatch --version

      - name: Configure git
        run: |
          # required for "mike deploy" command below which pushes to gh-pages
          git config user.name github-actions
          git config user.email github-actions@github.com

      ###########################################
      # RECORD BENCHMARK - ONLY ON PUSH TO MASTER
      ###########################################

      - name: Run benchmarks for tag
        if: github.ref_type == 'tag' && github.event_name == 'push'
        env:
          # See https://github.com/github/docs/issues/21930
          # And https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the master branch so we can run benchmarks on it
          git remote add upstream https://github.com/${{ github.repository }}.git
          git fetch origin master:master
          git checkout master

          # Get tag name
          TAG=${GITHUB_REF#refs/tags/}
          echo "TAG: $TAG"

          # TODO: REMOVE ONCE FIXED UPSTREAM
          # Fix for https://github.com/airspeed-velocity/asv_runner/issues/45
          # Prepare virtual environment
          # Currently, we have to monkeypatch the `timeit` function in the `timeraw` benchmark.
          # The problem is that `asv` passes the code to execute via command line, and when the
          # code is too big, it fails with `OSError: [Errno 7] Argument list too long`.
          # So we have to tweak it to pass the code via STDIN, which doesn't have this limitation.
          #
          # 1. First create the virtual environment, so that asv generates the directories where
          #    the monkeypatch can be applied.
          echo "Creating virtual environment..."
          asv setup -v || true
          echo "Virtual environment created."
          # 2. Now let's apply the monkeypatch by appending it to the `timeraw.py` files.
          # First find all `timeraw.py` files
          echo "Applying monkeypatch..."
          find .asv/env -type f -path "*/site-packages/asv_runner/benchmarks/timeraw.py" | while read -r file; do
              # Add a newline and then append the monkeypatch contents
              echo "" >> "$file"
              cat "benchmarks/monkeypatch_asv_ci.txt" >> "$file"
          done
          echo "Monkeypatch applied."
          # END OF MONKEYPATCH

          # Prepare the profile under which the benchmarks will be saved.
          # We assume that the CI machine has a name that is unique and stable.
          # See https://github.com/airspeed-velocity/asv/issues/796#issuecomment-1188431794
          echo "Preparing benchmarks profile..."
          asv machine --yes --machine ci-linux
          echo "Benchmarks profile DONE."

          # Run benchmarks for the current tag
          # - `^` means that we mean the COMMIT of the tag's branch, not the BRANCH itself.
          #       Without it, we would run benchmarks for the whole branch history.
          #       With it, we run benchmarks FROM the tag's commit (incl) TO ...
          # - `!` means that we want to select range spanning a single commit.
          #       Without it, we would run benchmarks for all commits FROM the tag's commit
          #       TO the start of the branch history.
          #       With it, we run benchmarks ONLY FOR the tag's commit.
          echo "Running benchmarks for tag ${TAG}..."
          asv run master^! -v
          echo "Benchmarks for tag ${TAG} DONE."

          # Generate benchmarks site
          # This should save it in `docs/benchmarks/`, so we can then use it when
          # building docs site with `mkdocs`.
          echo "Generating benchmarks site..."
          asv publish
          echo "Benchmarks site DONE."

          # Stage and commit benchmark results
          # 1. Create a new branch and commit benchmark results
          echo "Staging and committing benchmark results..."
          # Add timestamp to make branch name unique
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="benchmark-${TAG}-${TIMESTAMP}"
          git checkout -b "${BRANCH_NAME}"
          git add .asv/results/
          git add docs/benchmarks/
          git commit -m "Add benchmark results for ${TAG}"
          echo "Benchmark results committed."

          # 2. Push to the new branch
          echo "Pushing benchmark results to new branch..."
          git push -u origin "${BRANCH_NAME}"

          # 3. Create a PR
          PR_URL="$(gh pr create --title "chore: Add benchmark results for ${TAG}" --body "Add benchmark results for ${TAG}" --base master)"
          echo "PR URL: ${PR_URL}"

          # 4. Wait for the PR status checks to pass
          gh pr checks "${PR_URL}" --watch

          # 5. Merge the PR and delete the branch
          gh pr merge "${PR_URL}" --admin --squash --delete-branch
          echo "Benchmark results pushed to master."

          # 6. Go back to the original branch
          git checkout master
          git pull origin master

      ##############################
      # BUILD & DEPLOY DOCS
      ##############################

      - name: Create Virtual Environment
        run: hatch env create docs

      # Conditions make sure to select the right step, depending on the job trigger.
      # Only one of the steps below will run at a time. The others will be skipped.

      - name: Check docs in pull requests with strict mode
        if: github.event_name == 'pull_request'
        run: |
          # XXX Enable strict mode once docs are clean
          echo "Strict check of docs disabled."
          # hatch run docs:build --strict

      - name: Build & deploy "dev" docs for a new commit to master
        if: github.event_name == 'push' && github.ref_type != 'tag'
        run: |
          # Fetch and checkout gh-pages to ensure we have the latest version
          git fetch origin gh-pages
          git checkout gh-pages
          git pull origin gh-pages
          git checkout master

          export SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          hatch run docs:mike deploy --push --update-aliases --title "dev (${SHORT_SHA})" dev

      - name: Build & deploy docs for a new tag
        if: github.ref_type == 'tag' && github.event_name == 'push'
        run: |
          # Fetch and checkout gh-pages to ensure we have the latest version
          git fetch origin gh-pages
          git checkout gh-pages
          git pull origin gh-pages
          git checkout master

          hatch run docs:mike deploy --push --update-aliases ${{ github.ref_name }} latest
          hatch run docs:mike set-default latest --push
